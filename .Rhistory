#Print the distance matrix
print(distance_matrix)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Writing a aa sequence into a fasta file
output_file <- "Homo_sapiens_6.fasta"
writeXStringSet(Homo_sapiens_6, file = output_file,
format = "fasta", width = 60)
aa_sequence <- translate(sequences.fasta)
aa_sequence <- translate("sequences.fasta")
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(mySequences01)
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- DNAString("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG")
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- DNAString("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG")
#Translating 6 and writing a new fasta file for seqeunce 6
library(Biostrings)
# Define the DNA sequence Homo_sapiens_6 as a single continuous string
Homo_sapiens_6 <- DNAString("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG"   # Concatenate all lines into a single continuous string
"GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", force = TRUE)
BiocManager::install("GenomicAlignments", force = TRUE)
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(genepop)
library(tidyr)
#Set Working directory for Data and Midterm folder ####
setwd("Bioinformatics/")
setwd("Data/Midterm01/")
#Checking to see if working directory is correct
getwd()
#1. Reading fasta file and print to view the file ####
mySequences <- readDNAStringSet("sequences.fasta")
print(mySequences, show = "complete")
View(mySequences)
#Aligning the sequences
msa_alignment <- msa(mySequences)
print(msa_alignment, show = "complete")
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
library(ape)
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
library(ape)
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
library(phangorn)
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
source("C:/Users/18638/OneDrive/Desktop/GitHub/Bioinformatics/Code/Midterm01.R", echo=TRUE)
install.packages("ape")
install.packages("ape")
install.packages("ape")
library(ape)
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
library(seqinr)
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
#Print the distance matrix
print(distance_matrix)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6, type = "seqinr::translate")
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6, type = "seqinr::translation")
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6, type = "seqinr::alignment")
# Print the translated sequence
print(aa_sequence)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6, type = "seqinr::alignment")
aa_sequence <- translate(Homo_sapiens_6, genetic.code = 2)
aa_sequence <- translate(DNAString(Homo_sapiens_6), genetic_code = 2)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
dna_sequence <- as.character(Homo_sapiens_6)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
library(Biostrings)
# Convert the DNA sequence to a DNAString object
dna_sequence <- DNAString(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
mySequences <- readDNAStringSet("Homo_sapiens_6.txt")
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- readDNAStringSet("Homo_sapiens_6.txt")
aa_sequence <- translate(Homo_sapiens_6)
# Read the DNA sequence set from the file
Homo_sapiens_6 <- readDNAStringSet("Homo_sapiens_6.txt")
# Extract the DNA sequence from the DNAStringSet object
dna_sequence <- as.character(Homo_sapiens_6)
# Convert the DNA sequence to a DNAString object
dna_string <- DNAString(dna_sequence)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(dna_string)
class(dna_string)
str(dna_string)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- readDNAStringSet("Homo_sapiens_6.txt")
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- readDNAStringSet("Homo_sapiens_6.txt")
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- readDNAStringSet("Homo_sapiens_6.txt")
aa_sequence <- translate(Homo_sapiens_6)
print(Homo_sapiens_6)
aa_sequence <- translate(Homo_sapiens_6)
# Extract the DNA sequence from the DNAStringSet object
dna_sequence <- Homo_sapiens_6[[1]]
# Translate the DNA sequence to amino acids
aa_sequence <- translate(dna_sequence)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", force = TRUE)
BiocManager::install("GenomicAlignments", force = TRUE)
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
library(seqinr)
library(ape)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- readDNAStringSet("Homo_sapiens_6.txt")
print(Homo_sapiens_6)
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- readDNAStringSet("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGGGCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG")
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <-"AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGGGCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <-"AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGGGCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
print(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <-"AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGGGCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
print(Homo_sapiens_6)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
dna_string <- DNAString(Homo_sapiens_6)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(dna_string)
detach("package:seqinr", unload = TRUE) # Unload seqinr if it's loaded
dna_string <- DNAString(Homo_sapiens_6)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(dna_string)
# Show the translated amino acid sequence
print(aa_sequence)
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
# Show the translated amino acid sequence
print(aa_sequence)
#Showing the translated amino acid sequence completely
print(aa_sequence, show = "complete")
print(msa_alignment, show = "complete")
#Aligning the sequences
msa_alignment <- msa(mySequences)
readDNAStringSet
#1. Reading fasta file and print to view the file ####
mySequences <- readDNAStringSet("sequences.fasta")
print(mySequences, show = "complete")
View(mySequences)
#Aligning the sequences
msa_alignment <- msa(mySequences)
print(msa_alignment, show = "complete")
#Showing the translated amino acid sequence completely
print(aa_sequence, show = "complete")
#Showing the translated amino acid sequence
print(aa_sequence)
print(toString(aa_sequence))
#Writing a aa sequence into a fasta file
output_file <- "amino_acid_sequence.fasta"
writeXStringSet(aa_sequence, file = output_file,
format = "fasta", width = 60)
#Writing a aa sequence into a fasta file
output_file <- "amino_acid_sequence.fasta"
writeXStringSet(aa_sequence, file = output_file,
format = "fasta", width = 60)
writeXStringSet(aa_sequence, file = output_file,
format = "fasta", width = 60)
#Writing a aa sequence into a fasta file
output_file <- "amino_acid_sequence.fasta"
writeXStringSet(aa_sequence, file = output_file,
format = "fasta", width = 60)
aa_xstring <- AAStringSet(aa_sequence)
# Specify the output file name
output_file <- "amino_acid_sequence.fasta"
# Write the XStringSet object to the FASTA file
writeXStringSet(aa_xstring, file = output_file, format = "fasta", width = 60)
#Checking to see if working directory is correct
getwd()
# load in all of the libraries that you might need
# this should always be at the start of your script
library(msa)
library(Biostrings)
library(seqinr)
library(phangorn)
library(tidyr)
library(dplyr)
# set the working directory to the folder containing all of your scripts and data
# filepaths and files should always be in quotes. Variables in R should not.
setwd("/Users/ojohnson/Documents/GitHub/Bioinformatics_Spring2024")
#Aligning the sequences
msa_alignment <- msa(mySequences)
print(msa_alignment, show = "complete")
print(mySequences, show = "complete")
View(mySequences)
# load in all of the libraries that you might need
# this should always be at the start of your script
library(msa)
library(Biostrings)
library(seqinr)
library(phangorn)
library(tidyr)
library(dplyr)
# set the working directory to the folder containing all of your scripts and data
# filepaths and files should always be in quotes. Variables in R should not.
setwd("/Users/18638/OneDrive/Desktop/GitHub/Bioinformatics/Data/Final_Project/")
# read in albatross Cytochrome B sequences
# assign each one to a variable
# Note that these fasta files are contained in a folder called 'Diomedea_exulans'
seq_1 <- readDNAStringSet("sequence_539.fasta")
seq_2 <- readDNAStringSet("sequence_540.fasta")
seq_3 <- readDNAStringSet("sequence_544.fasta")
seq_4 <- readDNAStringSet("sequence_901.fasta")
seq_5 <- readDNAStringSet("sequence_902.fasta")
seq_6 <- readDNAStringSet("sequence_903.fasta")
seq_7 <- readDNAStringSet("sequence_904.fasta")
seq_8 <- readDNAStringSet("sequence_905.fasta")
seq_9 <- readDNAStringSet("sequence_906.fasta")
seq_10 <- readDNAStringSet("sequence_907.fasta")
seq_11 <- readDNAStringSet("sequence_908.fasta")
seq_12 <- readDNAStringSet("sequence_909.fasta")
seq_13 <- readDNAStringSet("sequence_910.fasta")
seq_14 <- readDNAStringSet("sequence_911.fasta")
seq_15 <- readDNAStringSet("sequence_918.fasta")
# combine samples into a single variable using the combine ('c') function
seqs <- c(seq_1, seq_2, seq_3, seq_4, seq_5, seq_6, seq_7, seq_8, seq_9, seq_10, seq_11, seq_12, seq_13, seq_14, seq_15)
names(seqs)
MyotisAln <- msa(seqs)
# run the MSA! Assign it to a new variable
MyotisAln <- msa(seqs)
print(albatrossAln, show="complete") # here, you can also calculate the number of gaps by hand, or use the next step
# run the MSA! Assign it to a new variable
MyotisAln <- msa(seqs)
# check the alignment length, two different ways
nchar(MyotisAln)
print(MyotisAln, show="complete") # here, you can also calculate the number of gaps by hand, or use the next step
# Calculate the GC content. First, calculate the frequency of each nucleotide
alFreq <- alphabetFrequency(MyotisAln)
alFreq # here, it also gives you the number of dashes (-) in the alignment, which is the number of gaps
# now pull out the total number of G's and C's
# here, the 'sum' function takes the sum, as you might expect
# the square brackets are for accessing rows and columns of a matrix
# values before the comma access rows, those after the comma access columns
# we want the columns
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
AT <- sum(alFreq[,"A"]) + sum(alFreq[,"T"])
# and calculate the percentage that are G or C (out of the total nucleotides)
GC / (GC + AT )
# combine samples into a single variable using the combine ('c') function
seqs <- c(seq_1, seq_2, seq_3, seq_4, seq_5, seq_6, seq_7, seq_8, seq_9, seq_10, seq_11, seq_12, seq_13, seq_14, seq_15)
# rename the samples to something shorter and more legible
# we do this by assigning a list of characters (using the same 'c' function)
# to the 'names' of the combined seqs variable
# check what these names are by first running just the names() function
names(seqs) <- c("Col_5_539", "Col_5_540", "Col_5_544",
"Col_5_901", "Col_5_902", "Col_5_903",
"Col_5_904", "Col_5_905", "Col_5_906",
"Col_5_907", "Col_5_908", "Col_5_909",
"Col_5_910", "Col_5_911", "Col_5_918")
# run the MSA! Assign it to a new variable
MyotisAln <- msa(seqs)
# check the alignment length, two different ways
nchar(MyotisAln)
print(MyotisAln, show="complete") # here, you can also calculate the number of gaps by hand, or use the next step
# Calculate the GC content. First, calculate the frequency of each nucleotide
alFreq <- alphabetFrequency(MyotisAln)
alFreq # here, it also gives you the number of dashes (-) in the alignment, which is the number of gaps
# now pull out the total number of G's and C's
# here, the 'sum' function takes the sum, as you might expect
# the square brackets are for accessing rows and columns of a matrix
# values before the comma access rows, those after the comma access columns
# we want the columns
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
AT <- sum(alFreq[,"A"]) + sum(alFreq[,"T"])
# and calculate the percentage that are G or C (out of the total nucleotides)
GC / (GC + AT )
# calculate the identity matrix
# first, convert the alignment to the seqinr format using msaConvert
# because the dist.alignment() function is part of the seqinr package
MyotisAln2 <- msaConvert(MyotisAln, type="seqinr::alignment")
d <- dist.alignment(MyotisAln2, "identity")
d
# this is a fancy way to compare only my 'epomophora' sample to the other samples in the matrix
# and convert the numbers to a percentage
100 - (round(as.matrix(d)[, "sequence_539.fasta", drop=FALSE], digits = 2) * 100)
# this is a fancy way to compare only my 'epomophora' sample to the other samples in the matrix
# and convert the numbers to a percentage
100 - (round(as.matrix(d)[, "Col_5_544", drop=FALSE], digits = 2) * 100)
# translate one sample to an amino acid sequence
# we again need to specify which package to use because the 'translate()' function
# exists in both the Biostrings and seqinr packages
seq_1_AA <- Biostrings::translate(Col_5_544)
# translate one sample to an amino acid sequence
# we again need to specify which package to use because the 'translate()' function
# exists in both the Biostrings and seqinr packages
seq_1_AA <- Biostrings::translate(seq_1)
print(seq_1_AA)
# this is a fancy way to compare only my 'epomophora' sample to the other samples in the matrix
# and convert the numbers to a percentage
100 - (round(as.matrix(d)[, "Col_5_544", drop=FALSE], digits = 2) * 100)
# translate one sample to an amino acid sequence
# we again need to specify which package to use because the 'translate()' function
# exists in both the Biostrings and seqinr packages
seq_1_AA <- Biostrings::translate(seq_1)
# translate one sample to an amino acid sequence
# we again need to specify which package to use because the 'translate()' function
# exists in both the Biostrings and seqinr packages
seq_1_AA <- Biostrings::translate(seq_10)
print(seq_1_AA)
print(seq_1_AA,  show="complete")
# write the alignment to a fasta file
# there is a write function in the phangorn package, but not one that I could find in seqinr or Biostrings
# Biostrings has a write function, but not for fasta-formatted files
MyotisAln_phyDat <- msaConvert(MyotisAln, type="phangorn::phyDat")
write.phyDat(MyotisAln_phyDat, "MyotisAln.fasta", format = "fasta")
MyotisAln <- nj(d)
MyotisAlnTree <- nj(d)
plot(MyotisAlnTree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
outgroup <-readDNAStringSet("sequence_outgroup.fasta")
# combine samples into a single variable using the combine ('c') function
seqs <- c(seq_1, seq_2, seq_3, seq_4, seq_5, seq_6, seq_7, seq_8, seq_9, seq_10, seq_11, seq_12, seq_13, seq_14, seq_15, outgroup)
# rename the samples to something shorter and more legible
# we do this by assigning a list of characters (using the same 'c' function)
# to the 'names' of the combined seqs variable
# check what these names are by first running just the names() function
names(seqs) <- c("Col_5_539", "Col_5_540", "Col_5_544",
"Col_5_901", "Col_5_902", "Col_5_903",
"Col_5_904", "Col_5_905", "Col_5_906",
"Col_5_907", "Col_5_908", "Col_5_909",
"Col_5_910", "Col_5_911", "Col_5_918",
"Outgroup")
# run the MSA! Assign it to a new variable
MyotisAln <- msa(seqs)
# check the alignment length, two different ways
nchar(MyotisAln)
print(MyotisAln, show="complete") # here, you can also calculate the number of gaps by hand, or use the next step
# Calculate the GC content. First, calculate the frequency of each nucleotide
alFreq <- alphabetFrequency(MyotisAln)
alFreq # here, it also gives you the number of dashes (-) in the alignment, which is the number of gaps
# now pull out the total number of G's and C's
# here, the 'sum' function takes the sum, as you might expect
# the square brackets are for accessing rows and columns of a matrix
# values before the comma access rows, those after the comma access columns
# we want the columns
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
AT <- sum(alFreq[,"A"]) + sum(alFreq[,"T"])
# and calculate the percentage that are G or C (out of the total nucleotides)
GC / (GC + AT )
# calculate the identity matrix
# first, convert the alignment to the seqinr format using msaConvert
# because the dist.alignment() function is part of the seqinr package
MyotisAln2 <- msaConvert(MyotisAln, type="seqinr::alignment")
d <- dist.alignment(MyotisAln2, "identity")
d
# translate one sample to an amino acid sequence
# we again need to specify which package to use because the 'translate()' function
# exists in both the Biostrings and seqinr packages
seq_1_AA <- Biostrings::translate(seq_10)
print(seq_1_AA)
# write the alignment to a fasta file
# there is a write function in the phangorn package, but not one that I could find in seqinr or Biostrings
# Biostrings has a write function, but not for fasta-formatted files
MyotisAln_phyDat <- msaConvert(MyotisAln, type="phangorn::phyDat")
write.phyDat(MyotisAln_phyDat, "MyotisAln.fasta", format = "fasta")
MyotisAlnTree <- nj(d)
plot(MyotisAlnTree, main="Phylogenetic Tree of Myotis myotis Gene Sequences")
