#Count the number of TRUE values (i.e., gaps)
num_gaps <- sum(gap_positions)
return(num_gaps)
}
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mycombinedSeq, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mySequenceFile, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(alignment, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#####Calculate the width of the alignments ####
alignment_length <- width(myFirstAlignment)
#Search for the presence of "-" in the sequence
gap_positions <- grepl(".", sequence)
####Function to count gaps in a sequence ####
count_gaps <- function(sequence) {
#Search for the presence of "-" in the sequence
gap_positions <- grepl(".", sequence)
#Count the number of TRUE values (i.e., gaps)
num_gaps <- sum(gap_positions)
return(num_gaps)
}
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mycombinedSeq, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
alignment_set <- DNAStringSet(mySequenceFile)
consensus <- consensusString(alignment_set)
print(consensus)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(consensus, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#####Calculate the width of the alignments ####
alignment_length <- width(consensus)
#Print the length of the alignments
print(alignment_length)
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
gc_content <- vcountPattern("GC", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(consensus)
HyenaEnv2Com
HyenaEnv2Com <- msaConvert(HyenaEnv2, type="seqinr::alignment")
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(consensus, type="phangorn::phyDat")
Alignment_phyDat
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
gc_content <- vcountPattern("GC", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
gc_content <- vcountPattern("C", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
# Calculate the GC content for each position in the alignment
c_content <- vcountPattern("G, C", alignment) / width(alignment)
# Calculate the GC content for each position in the alignment
c_content <- vcountPattern("G", "C", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
# Assuming genome_sequence is a DNAStringSet
genome_sequence <- readDNAStringSet("sequence.fasta")
G_content <- vcountPattern("G", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
# Print the GC content for each position
print(c_content)
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
c_content <- vcountPattern("C", alignment) / width(alignment)
G_content <- vcountPattern("G", alignment) / width(alignment)
# Print the GC content for each position
print(c_content)
print(g_content)
print(G_content)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
# Print the GC content for each position
print(c_content)
print(G_content)
gc_count <- sum(str_count(consensus, "G") + str_count(consensus, "C"))
# Calculate the GC content
gc_content <- gc_count / nchar(consensus) * 100
# Print the GC content
print(gc_content)
mySequenceFile
#### Creating an msa alignment ####
myFirstAlignment <- msa(mySequenceFile)
myFirstAlignment
library(dplyr)
library(tidyverse)
library(genepop)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
HyenaEnv2Com
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
####Creat Phylogenetic Tree ####
Env2Tree <- nj(d)
plot(Env2Tree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
#### Translate DNA sequence into AA sequence ####
dna_sequences <- readDNAStringSet("Data/Homework05/sequence01.fasta")
amino_acid_sequences <- translate(dna_sequences)
amino_acid_sequences
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
install.packages("seqinr")
library(seqinr)
library(ape)
install.packages("phangorn")
library(phangorn)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
HyenaEnv2Com
HyenaEnv2Com <- msaConvert(HyenaEnv2, type="seqinr::alignment")
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
####Creat Phylogenetic Tree ####
Env2Tree <- nj(d)
plot(Env2Tree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
mySequenceFile
#### Creating a consensus ####
alignment_set <- DNAStringSet(mySequenceFile)
consensus <- consensusString(alignment_set)
print(consensus)
#### Creating an msa alignment ####
myFirstAlignment <- msa(mySequenceFile)
myFirstAlignment
print(myFirstAlignment, show="complete")
####Function to count gaps in a consensus ####
count_gaps <- function(sequence) {
#Search for the presence of "-" in the sequence
gap_positions <- grepl("-", sequence)
#Count the number of TRUE values (i.e., gaps)
num_gaps <- sum(gap_positions)
return(num_gaps)
}
#Count gaps in each sequence of the consensus
num_gaps_in_sequences <- sapply(consensus, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#####Calculate the width of the alignments ####
alignment_length <- width(consensus)
#Print the length of the alignments
print(alignment_length)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
HyenaEnv2Com
HyenaEnv2Com <- msaConvert(HyenaEnv2, type="seqinr::alignment")
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
####Creat Phylogenetic Tree ####
Env2Tree <- nj(d)
plot(Env2Tree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
#### Translate DNA sequence into AA sequence ####
dna_sequences <- readDNAStringSet("Data/Homework05/sequence01.fasta")
amino_acid_sequences <- translate(dna_sequences)
amino_acid_sequences
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(myFirstAlignment, type="phangorn::phyDat")
print(result)
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
library(UniprotR)
library(protti)
library(r3dmol)
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#Checked that directory was in place ####
getwd()
setwd("Data/")
setwd("Homework06/")
#Checked that directory was in place ####
getwd()
mySequences01 <- readDNAStringSet("sequence01.fasta")
mySequences01
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
?PlotGoInfo()
# Connect to UniProt database
up <- UniProt.ws(accession_numbers)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
#This is where the problem is ####
?GetProteinGOInfo
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
AccessionNumbersGO <- GetProteinGOInfo(idmapping_2024_02_12)
PlotGoInfo(idmapping_2024_02_12)
PlotGoInfo(idmapping_2024_02_12.fasta)
#Checked that directory was in place ####
getwd()
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
# Sample list of accession numbers
accession_numbers <- c("A0A6G1AHE8", "A0A7J7SV63", "P21445", "Q2F7I8", "A0A7J7U5J2")
# Convert the list to a character string
accession_string <- paste(accession_numbers, collapse = ",")
# Print the formatted string
print(accession_string)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_string)
PlotGoInfo(AccessionNumbersGO)
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
# Sample list of accession numbers
accession_numbers <- c("A0A6G1AHE8", "A0A7J7SV63", "P21445", "Q2F7I8", "A0A7J7U5J2")
# Convert the list to a character string
accession_string <- paste(accession_numbers, collapse = ",")
# Print the formatted string
print(accession_string)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
str(AccessionNumbersGO)
summary(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
?PlotGoInfo()
library(UniprotR)
PlotGoInfo(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO, directorypath = NULL)
PlotGoInfo(AccessionNumbersGO)
str(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
write.csv(AccessionNumbersGO, "AccessionNumbersGO.csv", row.names = FALSE)
PlotGoInfo("AccessionNumbersGO.csv")
PlotGoInfo(AccessionNumbersGO)
PlotGoInfo("AccessionNumbersGO.csv")
# Read the CSV file into a data frame
AccessionNumbersGO <- read.csv("AccessionNumbersGO.csv")
# Plot GO information
PlotGoInfo(AccessionNumbersGO)
# Read the CSV file into a data frame
AccessionNumbersGO <- read.csv("AccessionNumbersGO.csv")
# Plot GO information
PlotGoInfo(AccessionNumbersGO)
PlotGoInfo("AccessionNumbersGO.csv")
?PlotGoInfo()
PlotGoInfo("AccessionNumbersGO.csv")
PlotGoInfo(AccessionNumbersGO)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
str(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
?PlotGoInfo()
PlotGoInfo(AccessionNumbersGO)
# Read the CSV file into a data frame
AccessionNumbersGO <- read.csv("AccessionNumbersGO.csv")
# Plot GO information
PlotGoInfo(AccessionNumbersGO)
# Assuming AccessionNumbersGO is a data frame returned by GetProteinGOInfo
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
# Assuming AccessionNumbersGO is a data frame with 'GOterm' and 'Count' columns
# Create a bar plot
barplot(AccessionNumbersGO$Count, names.arg = AccessionNumbersGO$GOterm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
class(AccessionNumbersGO$Count)
AccessionNumbersGO$Count <- as.numeric(AccessionNumbersGO$Count)
PlotGoInfo(AccessionNumbersGO)
str(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
# Assuming AccessionNumbersGO is your original data frame
# Extract GO terms and their counts from AccessionNumbersGO
go_terms <- unlist(strsplit(AccessionNumbersGO$Gene.Ontology..GO., ";"))
go_terms <- gsub("\\[.*?\\]", "", go_terms)  # Remove GO IDs from GO terms
# Create a data frame with GO terms and their counts
go_counts <- data.frame(GoTerm = go_terms, Count = rep(1, length(go_terms)))
# Summarize the counts for each GO term
go_counts <- aggregate(Count ~ GoTerm, go_counts, sum)
# Plot the GO information
barplot(go_counts$Count, names.arg = go_counts$GoTerm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
#Checked that directory was in place ####
getwd()
setwd("Data/")
setwd("Homework06/")
#Checked that directory was in place ####
getwd()
# Assuming AccessionNumbersGO is your original data frame
# Extract GO terms and their counts from AccessionNumbersGO
go_terms <- unlist(strsplit(AccessionNumbersGO$Gene.Ontology..GO., ";"))
go_terms <- gsub("\\[.*?\\]", "", go_terms)  # Remove GO IDs from GO terms
# Create a data frame with GO terms and their counts
go_counts <- data.frame(GoTerm = go_terms, Count = rep(1, length(go_terms)))
# Summarize the counts for each GO term
go_counts <- aggregate(Count ~ GoTerm, go_counts, sum)
# Plot the GO information
barplot(go_counts$Count, names.arg = go_counts$GoTerm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
PlotGoInfo(AccessionNumbersGO)
library(UniprotR)
PlotGoInfo(AccessionNumbersGO)
GetPathology_Biotech(AccessionNumbersGO)
#Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
GetPathology_Biotech(accession_numbers)
PlotGoInfo(accession_numbers)
GetPathology_Biotech(accession_numbers)
Get.diseases(accession_numbers)
GetPathology_Biotech(accession_string)
Get.diseases(accession_string)
Get.diseases(accession_numbers)
GetPathology_Biotech(accession_numbers)
#NA on all counts
Get.diseases(accession_numbers)
#Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GetPathology_Biotech(AccessionNumbersGO)
#Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GetPathology_Biotech(accession_string)
library(protti)
fetch_uniprot(accession_numbers)
#12.
fetch_pdb(accession_numbers)
#12.
fetch_pdb("1ZMR", "2HWG")
#12. Pull any available structural information from the Protein DataBase
fetch_pdb("1ZMR")
fetch_pdb("2HWG")
#13. Get information on any available 3D structures for your gene
fetch_alphafold_prediction(accession_numbers)
#13. Get information on any available 3D structures for your gene
fetch_alphafold_prediction("1ZMR")
accession_numbers
#13. Get information on any available 3D structures for your gene
fetch_alphafold_prediction(accession_numbers)
PlotGoInfo("A0A6G1AHE8")
PlotGoInfo(A0A6G1AHE8)
fetch_uniprot(A0A6G1AHE8)
accession_numbers
fetch_uniprot(accession_numbers)
#13. Get information on any available 3D structures for your gene
fetch_alphafold_prediction(accession_numbers)
#7. Extract GO terms and their counts from AccessionNumbersGO ####
PlotGoInfo(accession_numbers)
#7. Extract GO terms and their counts from AccessionNumbersGO ####
PlotGoInfo(AccessionNumbersGO)
#7. Extract GO terms and their counts from AccessionNumbersGO ####
View(AccessionNumbersGO)
read.csv(AccessionNumbersGO.csv)
fetch_uniprot(accession_numbers)
viewtibble <- fetch_uniprot(accession_numbers)
view(viewtibble)
View(viewtibble)
#NA on all counts
Get.diseases(1ZMR)
#NA on all counts
Get.diseases("1ZMR")
accession_numbers
#NA on all counts
Get.diseases(accession_numbers)
#NA on all counts
Get.diseases("accession_numbers")
#6. Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", force = TRUE)
BiocManager::install("GenomicAlignments", force = TRUE)
library(msa)
library(Biostrings)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(genepop)
library(tidyr)
install.packages("seqinr")
library(seqinr)
library(ape)
library(UniprotR)
library(protti)
library(r3dmol)
#5. Sample list of accession numbers ####
accession_numbers <- c("A0A6G1AHE8", "A0A7J7SV63", "P21445", "Q2F7I8", "A0A7J7U5J2")
# Convert the list to a character string
accession_string <- paste(accession_numbers, collapse = ",")
# Print the formatted string
print(accession_string)
#6. Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
str(AccessionNumbersGO)
#7. Extract GO terms and their counts from AccessionNumbersGO ####
View(AccessionNumbersGO)
df <-- read.csv(AccessionNumbersGO.csv)
df <-- read.csv("AccessionNumbersGO.csv")
df <-- read.csv("AccessionNumbersGO.csv")
#7. Extract GO terms and their counts from AccessionNumbersGO ####
View(AccessionNumbersGO)
df <-- read.csv("AccessionNumbersGO.csv")
df <-- read.csv(AccessionNumbersGO.csv)
df <-- read.csv("Data/Homework06/AccessionNumbersGO.csv")
#PlotGoInfo(AccessionNumbersGO) #--> Did not work
go_terms <- unlist(strsplit(AccessionNumbersGO$Gene.Ontology..GO., ";"))
go_terms <- gsub("\\[.*?\\]", "", go_terms)  # Remove GO IDs from GO terms
# Create a data frame with GO terms and their counts
go_counts <- data.frame(GoTerm = go_terms, Count = rep(1, length(go_terms)))
# Summarize the counts for each GO term
go_counts <- aggregate(Count ~ GoTerm, go_counts, sum)
# Plot the GO information
barplot(go_counts$Count, names.arg = go_counts$GoTerm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
PlotGoInfo(AccessionNumbersGO) #--> Did not work
PlotGoInfo(AccessionNumbersGO) #--> Did not work
PlotGoInfo(AccessionNumbersGO) #--> Did not work
#10. Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GetPathology_Biotech(accession_numbers)
#NA on all counts
Get.diseases(accession_numbers)
#NA on all counts
Get.diseases(1ZMR)
#NA on all counts
Get.diseases("1ZMR")
#NA on all counts
summary(df)
#NA on all counts
summary(df)
df <-- read.csv("Data/Homework06/AccessionNumbersGO.csv")
#NA on all counts
summary(AccessionNumbersGO)
AccessionNumbersGO = AccessionNumbersGO %>%
mutate(Gene.Ontology.IDs = as.factor(Gene.Ontology.IDs),
Gene.Ontology..GO. = as.factor(Gene.Ontology..GO.),
Gene.Ontology..biological.process. = as.factor(Gene.Ontology..GO.),
Gene.Ontology..molecular.function. = as.factor(Gene.Ontology..molecular.function.),
Gene.Ontology..cellular.component. = as.factor(Gene.Ontology..cellular.component.))
#NA on all counts
summary(AccessionNumbersGO)
AccessionNumbersGO = AccessionNumbersGO %>%
mutate(Gene.Ontology.IDs = as.factor(Gene.Ontology.IDs),
Gene.Ontology..GO. = as.factor(Gene.Ontology..GO.),
Gene.Ontology..biological.process. = as.factor(Gene.Ontology..GO.),
Gene.Ontology..molecular.function. = as.factor(Gene.Ontology..molecular.function.),
Gene.Ontology..cellular.component. = as.factor(Gene.Ontology..cellular.component.))
Get.diseases(accession_numbers)
Get.diseases("A0A6G1AHE8", "A0A7J7SV63", "P21445", "Q2F7I8", "A0A7J7U5J2")
Get.diseases("A0A6G1AHE8", "A0A7J7SV63")
AccessionNumbersGO = AccessionNumbersGO %>%
mutate(Gene.Ontology.IDs = as.factor(Gene.Ontology.IDs),
Gene.Ontology..GO. = as.factor(Gene.Ontology..GO.),
Gene.Ontology..biological.process. = as.factor(Gene.Ontology..GO.),
Gene.Ontology..molecular.function. = as.factor(Gene.Ontology..molecular.function.),
Gene.Ontology..cellular.component. = as.factor(Gene.Ontology..cellular.component.))
Get.diseases(accession_numbers)
?writeXStringSet
