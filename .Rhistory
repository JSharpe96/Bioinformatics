for (aln in alignment) {
for (pair in aln) {
# Extract alignment details
alignment_details <- alignmentInfo(pair)
# Get positions of mismatches
mismatch_positions <- which(pair@ali != "|")
# Extract mutation types and positions
for (pos in mismatch_positions) {
mutation <- paste0(pair@subject[pos], pos, pair@pattern[pos])
if (mutation %in% names(mutations)) {
mutations[[mutation]] <- mutations[[mutation]] + 1
} else {
mutations[[mutation]] <- 1
}
}
}
}
# Calculate mutation frequencies
total_alignments <- sum(unlist(mutations))
mutation_frequencies <- lapply(mutations, function(mutation_count) {
mutation_count / total_alignments
})
return(mutation_frequencies)
}
# Analyze mutations
mutation_frequencies <- analyze_mutations(alignment)
# Define a function to identify mutations and calculate frequencies
analyze_mutations <- function(alignment) {
# Initialize variables to store mutation information
mutations <- list()
# Loop through the alignment pairs
for (aln in alignment) {
for (pair in aln) {
# Get the pattern (reference) and subject (aligned) sequences
pattern_seq <- unlist(pattern(pair))
subject_seq <- unlist(subject(pair))
# Find positions where sequences differ
mutation_positions <- which(pattern_seq != subject_seq)
# Extract mutation types and positions
for (pos in mutation_positions) {
mutation <- paste0(pattern_seq[pos], pos, subject_seq[pos])
if (mutation %in% names(mutations)) {
mutations[[mutation]] <- mutations[[mutation]] + 1
} else {
mutations[[mutation]] <- 1
}
}
}
}
# Calculate mutation frequencies
total_mutations <- sum(unlist(mutations))
mutation_frequencies <- lapply(mutations, function(mutation_count) {
mutation_count / total_mutations
})
return(mutation_frequencies)
}
# Analyze mutations
mutation_frequencies <- analyze_mutations(alignment)
#---
#1. Reading fasta file and print to view the file ####
mySequences <- readDNAStringSet("sequences.fasta")
print(mySequences)
print(mySequences, show = "complete")
View(mySequences)
#2. Checking for differences between sequences ####
#Homo_sapiens_6 has one less bp than the other sequences
# Print each sequence with an identifier
for (i in 1:length(mySequences)) {
cat("Sequence", i, ":", mySequences[i], "\n")
}
# Print each sequence with an identifier
for (i in 1:length(mySequences)) {
cat("Sequence", i, ":", toString(mySequences[[i]]), "\n")
}
print(mySequences, show = "complete")
View(mySequences)
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
library(Biostrings)
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
#4. Finding the outlier in the sequences ####
# Calculating sequence differences
differences <- matrix(0, nrow = length(mySequences), ncol = length(mySequences))
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
# Find the individual with the most differences
most_different_index <- which.max(rowSums(differences))
# Translate the sequence to protein
translated_sequence <- translate(mySequences[[most_different_index]], genetic.code = 1)
#4. Finding the outlier in the sequences ####
# Load Biostrings package
library(Biostrings)
#4. Finding the outlier in the sequences ####
# Calculate sequence differences
differences <- matrix(0, nrow = length(mySequences), ncol = length(mySequences))
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
# Find the individual with the most differences
most_different_index <- which.max(rowSums(differences))
# Translate the sequence to protein
translated_sequence <- translate(mySequences[[most_different_index]], genetic.code = "Standard")
#4. Finding the outlier in the sequences ####
# Calculate sequence differences
differences <- matrix(0, nrow = length(mySequences), ncol = length(mySequences))
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
# Find the individual with the most differences
most_different_index <- which.max(rowSums(differences))
# Translate the sequence to protein
translated_sequence <- translate(mySequences[[most_different_index]], genetic.code = "Standard")
#4. Finding the outlier in the sequences ####
# Load Biostrings package
library(Biostrings)
# Calculate sequence differences
differences <- matrix(0, nrow = length(mySequences), ncol = length(mySequences))
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
# Find the individual with the most differences
most_different_index <- which.max(rowSums(differences))
# Translate the sequence to protein
translated_sequence <- translate(mySequences[[most_different_index]], genetic.code = GENETIC_CODE$Standard)
#4. Finding the outlier in the sequences ####
# Load Biostrings package
library(Biostrings)
# Calculate sequence differences
differences <- matrix(0, nrow = length(mySequences), ncol = length(mySequences))
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
# Find the individual with the most differences
most_different_index <- which.max(rowSums(differences))
# Translate the sequence to protein
translated_sequence <- translate(mySequences[[most_different_index]], genetic.code = "Standard")
#4. Finding the outlier in the sequences ####
# Load Biostrings package
library(Biostrings)
# Calculate sequence differences
differences <- matrix(0, nrow = length(mySequences), ncol = length(mySequences))
for (i in 1:length(mySequences)) {
for (j in 1:length(mySequences)) {
differences[i, j] <- sum(mySequences[[i]] != mySequences[[j]])
}
}
# Find the individual with the most differences
most_different_index <- which.max(rowSums(differences))
# Translate the sequence to protein
translated_sequence <- translate(mySequences[[most_different_index]], genetic.code = GENETIC_CODE$Standard)
# Write the translated sequence to a FASTA file
writeXStringSet(XStringSet(translated_sequence), file = "most_different_protein.fasta")
#1. Reading fasta file and print to view the file ####
mySequences <- readDNAStringSet("sequences.fasta")
print(mySequences, show = "complete")
View(mySequences)
#Aligning the sequences
alignment <- lapply(1:(length(mySequences) - 1), function(i) {
lapply((i + 1):length(mySequences), function(j) {
pairwiseAlignment(pattern = mySequences[i], subject = mySequences[j])
})
})
#4. Finding the outlier in the sequences ####
msa_alignment <- msa(alignment)
#Aligning the sequences
msa_alignment <- msa(mySequences)
View(msa_alignment)
print(msa_alignment, show = "complete")
HyenaEnv2 <- msaConvert(mySequenceFile, type = "seqinr::alignment")
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
myAlignment <- msa(msa_alignment)
library(seqinr)
library(ape)
myAlignment <- msa(msa_alignment)
# Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
# Print the distance matrix
print(distance_matrix)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
install.packages("BiocManager")
install.packages("BiocManager")
library(Biostrings)
aa_sequence <- translate(Homo_sapiens_6)
translated_sequences <- seqinr::translate(Homo_sapiens_6, code = 1, frame = 1)
translated_sequences <- seqinr::translate(Homo_sapiens_6)
translated_sequence <- seqinr::translate(Homo_sapiens_6)
sequence_chars <- as.character(Homo_sapiens_6)
translated_sequence <- seqinr::translate(sequence_chars)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Remove newline characters and any other non-DNA characters
Homo_sapiens_6 <- gsub("[\r\n ]", "", Homo_sapiens_6)
# Translate the DNA sequence into amino acids
translated_sequence <- translate(DNAMultipleAlignment(Homo_sapiens_6))
# Translate the DNA sequence into amino acids
translated_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
sequence_chars <- as.character(Homo_sapiens_6)
translated_sequence <- seqinr::translate(sequence_chars)
translated_sequence <- seqinr::translate(sequence_chars)
class(sequence_chars)
translated_sequence <- seqinr::translate(sequence_chars)
translated_sequence <- seqinr::translate(sequence_chars)
translated_sequence <- translate(sequence_chars)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
translated_sequence <- translate(sequence_chars)
translated_sequence <- translate(Homo_sapiens_6)
Homo_sapiens_6 <- as.character(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6)
attach(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
Homo_sapiens_6 <- as.character(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6)
translated_sequence <- Biostrings::translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
translated_sequence <- Biostrings::translate(Homo_sapiens_6)
#3. Translate DNA sequence into AA sequence ####
aa_sequence <- translate(mySequences01)
aa_sequence
as.character(Homo_sapiens_6)
translated_sequence <- Biostrings::translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
as.character(Homo_sapiens_6)
translated_sequence <- Biostrings::translate(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6)
translated_sequence <- translate(Homo_sapiens_6, type="seqinr::translate")
# Translate the DNA sequence into amino acids using translate() from Biostrings
translated_sequence <- Biostrings::translate(Homo_sapiens_6)
# Load the Biostrings package
library(Biostrings)
# Define the DNA sequence as a DNAString object
dna_sequence <- DNAString(Homo_sapiens_6)
aa_sequence <- translations::
aa_sequence <- translations::
# Find the index of the sequence corresponding to Homo_sapiens_6
sequence_index <- which(names(fasta_sequences) == "Homo_sapiens_6")
# Find the index of the sequence corresponding to Homo_sapiens_6
sequence_index <- which(names("sequences.fasta") == "Homo_sapiens_6")
if (length(sequence_index) == 0) {
print("Homo_sapiens_6 not found in the FASTA file.")
} else {
# Extract the DNA sequence of Homo_sapiens_6
homo_sapiens_6_sequence <- as.character(fasta_sequences[sequence_index])
# Translate Homo_sapiens_6 sequence to protein
translated_sequence <- translate(DNAString(homo_sapiens_6_sequence))
# Write the translated sequence to a new FASTA file
header <- ">Homo_sapiens_6_translated"
fasta_content <- paste(header, translated_sequence, sep = "\n")
writeLines(fasta_content, "Homo_sapiens_6_translated.fasta")
}
# Find the index of the sequence corresponding to Homo_sapiens_6
sequence_index <- which(names("sequences.fasta") == ">Homo_sapiens_6")
if (length(sequence_index) == 0) {
print("Homo_sapiens_6 not found in the FASTA file.")
} else {
# Extract the DNA sequence of Homo_sapiens_6
homo_sapiens_6_sequence <- as.character(fasta_sequences[sequence_index])
# Translate Homo_sapiens_6 sequence to protein
translated_sequence <- translate(DNAString(homo_sapiens_6_sequence))
# Write the translated sequence to a new FASTA file
header <- ">Homo_sapiens_6_translated"
fasta_content <- paste(header, translated_sequence, sep = "\n")
writeLines(fasta_content, "Homo_sapiens_6_translated.fasta")
}
# Find the index of the sequence corresponding to Homo_sapiens_6
sequence_index <- which(names("sequences.fasta") == ">Homo_sapiens_6")
if (length(sequence_index) == 0) {
print("Homo_sapiens_6")
} else {
# Extract the DNA sequence of Homo_sapiens_6
homo_sapiens_6_sequence <- as.character(fasta_sequences[sequence_index])
# Translate Homo_sapiens_6 sequence to protein
translated_sequence <- translate(DNAString(homo_sapiens_6_sequence))
# Write the translated sequence to a new FASTA file
header <- ">Homo_sapiens_6_translated"
fasta_content <- paste(header, translated_sequence, sep = "\n")
writeLines(fasta_content, "Homo_sapiens_6_translated.fasta")
}
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", force = TRUE)
BiocManager::install("GenomicAlignments", force = TRUE)
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
#Set Working directory for Data and Midterm folder ####
setwd("Bioinformatics/")
setwd("Data/Midterm01/")
#Checking to see if working directory is correct
getwd()
#1. Reading fasta file and print to view the file ####
mySequences <- readDNAStringSet("sequences.fasta")
print(mySequences, show = "complete")
View(mySequences)
#Aligning the sequences
msa_alignment <- msa(mySequences)
print(msa_alignment, show = "complete")
#4. Finding the outlier in the sequences ####
HGS <- msaConvert(msa_alignment, type = "seqinr::alignment")
#Compute a distance matrix using the 'dist.alignment' function
distance_matrix <- dist.alignment(HGS)
#Print the distance matrix
print(distance_matrix)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Writing a aa sequence into a fasta file
output_file <- "Homo_sapiens_6.fasta"
writeXStringSet(Homo_sapiens_6, file = output_file,
format = "fasta", width = 60)
aa_sequence <- translate(sequences.fasta)
aa_sequence <- translate("sequences.fasta")
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(mySequences01)
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- DNAString("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG")
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- DNAString("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG")
#Translating 6 and writing a new fasta file for seqeunce 6
library(Biostrings)
# Define the DNA sequence Homo_sapiens_6 as a single continuous string
Homo_sapiens_6 <- DNAString("AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG"   # Concatenate all lines into a single continuous string
"GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
#Translating 6 and writing a new fasta file for seqeunce 6
Homo_sapiens_6 <- "AATCTACTCCCAGGAGCAGGGAGGGCAGGAGCCAGG
GCTGGGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAG
CAACCTCAAACAGACACCATGGTGCACCTGACTCCTGTGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCA
AGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAA
GGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCT
CTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAG
TCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAG
TGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGA
GCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTT
CTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGG"
# Translate the DNA sequence to amino acids
aa_sequence <- translate(Homo_sapiens_6)
