ATCCAAGGATTTGTAAAGGTCAGTGTGTAGATTGTAACACTTTCGGGTGTCGATCGGGGGCTGACTGCCA
ACATCAAAATCTAAGACAACAGACCTTTTATGTATGCCCTGGGACTGGTAACTTTGACACCTGCGGAGGC
ATAGAACATTTCTTTTGTGGCTCCTGGGGATGTGAAACTATTGCTCCATGGGTCAAACAACCCAGTAACG
ACCTAATTACCCTTGTTCGGGCCAGTAACCAAACTAGTCCATCCAATAGAAACCCAATTTCTATTCAACT
CACTCCTAGAGGCAAAACAGAGAACTGGTCAGTAGCGAAGGTGTGGGGCATTCGACTCTGGCTCACCGGT
CACGACATAGGCTTTTTATTCTCTATTCAAAAACAACTAGTACTCCCGCCTCCAGTGGCGTTGGGGCCTA
TGGCCGCATCGGCTGCAAATCATAAACCTAGATCCACCCCAAGTGTGCCTGCCCCTACTCAGGCTCCACC
GAGCCTCAGTTCTACTGATTCCCCCCTGGGTGGCGTACCAATCCAGCTCCGGCCCCCCAGATCAAGGCCA
GTAATCTACTCTATTCTAAACCTTACTTACAGTTTCTTAAATTCCACAAATCTCACCAACACAGACTGCT
GGCTTTGTTTAGATTCACGACCACCTTTCTATGTTGGATGGGCAATTTCTGGGCAAGTGTCCAGAGACAT
AGAAGGCCACTGTTCCTGGGGACGGCCTCCTGTTTTAACTATACAGGAAGTAACTGGTTCAGGCCTCTGT
GTCTTAGGAAACGGAGGAACTCTGACAACCTTCCCACACCTCAGTCACTTATGTAATCAGACCATGACGG
CTACAGGGTCCTCCTACCTCAGGCCCCCTAGTGGGGCATGGTTCGCATGTACTTCCGGCCTTACTTCTTG
CATCCACCCTCAGGTGTTAAAGAACGACACCTTATGTGTCCTAGTCACCCTCTTTCCACAAGTATATTAC
CAGCCTGCATCTTCGTTCTTTGAGATCCAGCCTGAACAAAAACACTCTCGAGGCAAGCGAGACTTGAGAG
TGTCAGCGGCCCTCCCAACCCTTATAGTTGGAACAGGAATAGAGGCTGGGGTTGGAACGGGCACAGCTGC
TCTAATACGAGGCAACCAGCAGTTTGACGCTTTAGCCCAAGCCATTGACTTTGATTTAGTCCAACTAGAA
AATTCTACTCGCCACATACGAGGTTCCTTAGATTCTTTGGCTGAAATGGCGCTACAGAACAGGCGGAGAC
TAGACCTAATATTATTACACCAAGGAGGATTATGCCAGGCTTTGGGAGAACAATGTTGTTTCTATGCCAG
TAACTCGGGAATTGTACAAGACAGCCTAGCTGTTGTACGCCAACATCTACAGGAAAGAGCAAAAATAAGA
GAACAGAATAAAAATTGGTATGAAAACATCTTTAACTGGTCCCCCTGGCTCACCGCTCTCATTACAGCCC
TGGCAGGCCCCCTAGCGCTTCTGCTGCTGCTCCTGACTTTAGGAGCCTACACTTTAAATAGATTACTTGC
CTTCATGCGAGAACGTCTGAGTGCCATACGACTGATGGTTCTGAGGTCTCAATATGCCCAGCCCCCAGCC
GACCAGAGCGAGGACCAGTACGTACAACTAGGTCCCTTAAAATTTCAAGAAGACCCATGA"
# Convert DNA sequence to DNAString object
dna_string <- DNAString(dna_sequence)
cleaned_dna_sequence <- gsub("[^ACGT]", "", dna_sequence)
# Convert cleaned DNA sequence to DNAString object
dna_string <- DNAString(cleaned_dna_sequence)
# Convert DNA sequence to DNAString object
dna_string <- DNAString(dna_sequence)
#Translate the DNA sequence to amino acids ####
read.fasta(sequence01.fasta)
#Translate the DNA sequence to amino acids ####
read.fasta(mySequences01)
#Translate the DNA sequence to amino acids ####
read(mySequences01)
#Translate the DNA sequence to amino acids ####
mySequences01 <- readDNAStringSet("sequence01.fasta")
# Initialize a list to store translated protein sequences
protein_sequences <- list()
# Translate each DNA sequence to amino acids and store the result
for (seq in mySequences01) {
# Translate DNA sequence to amino acids
protein_sequence <- translate(seq)
# Store translated protein sequence in the list
protein_sequences <- c(protein_sequences, list(protein_sequence))
}
# Print the translated protein sequences
print(protein_sequences)
# Translate each DNA sequence to amino acids using lapply
protein_sequences <- lapply(mySequences01, translate)
# Print the translated protein sequences
print(protein_sequences)
dna_sequence <- "ATGGAAGGCCACAAAGAACCTCAAAAACCCACTCAAGCTCAAGCTATGCTGCTCCTGATTTTTGATGCTC
TACTAACTGTATGTAAATCCAATCCCAGCTCCCAGCTCCCCAACCCTCACCAGCCTACCACTGCCAAATG
GGTTTTGCGAGGACCCCTAACAACACCTAGGGACTTGGGGCGGACAGTTCAAGAATTGACATTAACCGGA
CCAGCATCCATCACATTCCCTACCTTCCATTTAGACCTCTGTAGTCTAGCGGGAGATCACTGGAACACAA
ATCCAAGGATTTGTAAAGGTCAGTGTGTAGATTGTAACACTTTCGGGTGTCGATCGGGGGCTGACTGCCA
ACATCAAAATCTAAGACAACAGACCTTTTATGTATGCCCTGGGACTGGTAACTTTGACACCTGCGGAGGC
ATAGAACATTTCTTTTGTGGCTCCTGGGGATGTGAAACTATTGCTCCATGGGTCAAACAACCCAGTAACG
ACCTAATTACCCTTGTTCGGGCCAGTAACCAAACTAGTCCATCCAATAGAAACCCAATTTCTATTCAACT
CACTCCTAGAGGCAAAACAGAGAACTGGTCAGTAGCGAAGGTGTGGGGCATTCGACTCTGGCTCACCGGT
CACGACATAGGCTTTTTATTCTCTATTCAAAAACAACTAGTACTCCCGCCTCCAGTGGCGTTGGGGCCTA
TGGCCGCATCGGCTGCAAATCATAAACCTAGATCCACCCCAAGTGTGCCTGCCCCTACTCAGGCTCCACC
GAGCCTCAGTTCTACTGATTCCCCCCTGGGTGGCGTACCAATCCAGCTCCGGCCCCCCAGATCAAGGCCA
GTAATCTACTCTATTCTAAACCTTACTTACAGTTTCTTAAATTCCACAAATCTCACCAACACAGACTGCT
GGCTTTGTTTAGATTCACGACCACCTTTCTATGTTGGATGGGCAATTTCTGGGCAAGTGTCCAGAGACAT
AGAAGGCCACTGTTCCTGGGGACGGCCTCCTGTTTTAACTATACAGGAAGTAACTGGTTCAGGCCTCTGT
GTCTTAGGAAACGGAGGAACTCTGACAACCTTCCCACACCTCAGTCACTTATGTAATCAGACCATGACGG
CTACAGGGTCCTCCTACCTCAGGCCCCCTAGTGGGGCATGGTTCGCATGTACTTCCGGCCTTACTTCTTG
CATCCACCCTCAGGTGTTAAAGAACGACACCTTATGTGTCCTAGTCACCCTCTTTCCACAAGTATATTAC
CAGCCTGCATCTTCGTTCTTTGAGATCCAGCCTGAACAAAAACACTCTCGAGGCAAGCGAGACTTGAGAG
TGTCAGCGGCCCTCCCAACCCTTATAGTTGGAACAGGAATAGAGGCTGGGGTTGGAACGGGCACAGCTGC
TCTAATACGAGGCAACCAGCAGTTTGACGCTTTAGCCCAAGCCATTGACTTTGATTTAGTCCAACTAGAA
AATTCTACTCGCCACATACGAGGTTCCTTAGATTCTTTGGCTGAAATGGCGCTACAGAACAGGCGGAGAC
TAGACCTAATATTATTACACCAAGGAGGATTATGCCAGGCTTTGGGAGAACAATGTTGTTTCTATGCCAG
TAACTCGGGAATTGTACAAGACAGCCTAGCTGTTGTACGCCAACATCTACAGGAAAGAGCAAAAATAAGA
GAACAGAATAAAAATTGGTATGAAAACATCTTTAACTGGTCCCCCTGGCTCACCGCTCTCATTACAGCCC
TGGCAGGCCCCCTAGCGCTTCTGCTGCTGCTCCTGACTTTAGGAGCCTACACTTTAAATAGATTACTTGC
CTTCATGCGAGAACGTCTGAGTGCCATACGACTGATGGTTCTGAGGTCTCAATATGCCCAGCCCCCAGCC
GACCAGAGCGAGGACCAGTACGTACAACTAGGTCCCTTAAAATTTCAAGAAGACCCATGA"
# Define your DNA sequence
dna_sequence <- "ATGGAAGGCCACAAAGAACCTCAAAAACCCACTCAAGCTCAAGCTATGCTGCTCCTGATTTTTGATGCTCTACTAACTGTATGTAAATCCAATCCCAGCTCCCAGCTCCCCAACCCTCACCAGCCTACCACTGCCAAATGGGTTTTGCGAGGACCCCTAACAACACCTAGGGACTTGGGGCGGACAGTTCAAGAATTGACATTAACCGGACCAGCATCCATCACATTCCCTACCTTCCATTTAGACCTCTGTAGTCTAGCGGGAGATCACTGGAACACAAATCCAAGGATTTGTAAAGGTCAGTGTGTAGATTGTAACACTTTCGGGTGTCGATCGGGGGCTGACTGCCAACATCAAAATCTAAGACAACAGACCTTTTATGTATGCCCTGGGACTGGTAACTTTGACACCTGCGGAGGCATAGAACATTTCTTTTGTGGCTCCTGGGGATGTGAAACTATTGCTCCATGGGTCAAACAACCCAGTAACGACCTAATTACCCTTGTTCGGGCCAGTAACCAAACTAGTCCATCCAATAGAAACCCAATTTCTATTCAACTCACTCCTAGAGGCAAAACAGAGAACTGGTCAGTAGCGAAGGTGTGGGGCATTCGACTCTGGCTCACCGGTCACGACATAGGCTTTTTATTCTCTATTCAAAAACAACTAGTACTCCCGCCTCCAGTGGCGTTGGGGCCTATGGCCGCATCGGCTGCAAATCATAAACCTAGATCCACCCCAAGTGTGCCTGCCCCTACTCAGGCTCCACCGAGCCTCAGTTCTACTGATTCCCCCCTGGGTGGCGTACCAATCCAGCTCCGGCCCCCCAGATCAAGGCCAGTAATCTACTCTATTCTAAACCTTACTTACAGTTTCTTAAATTCCACAAATCTCACCAACACAGACTGCTGGCTTTGTTTAGATTCACGACCACCTTTCTATGTTGGATGGGCAATTTCTGGGCAAGTGTCCAGAGACATAGAAGGCCACTGTTCCTGGGGACGGCCTCCTGTTTTAACTATACAGGAAGTAACTGGTTCAGGCCTCTGTGTCTTAGGAAACGGAGGAACTCTGACAACCTTCCCACACCTCAGTCACTTATGTAATCAGACCATGACGGCTACAGGGTCCTCCTACCTCAGGCCCCCTAGTGGGGCATGGTTCGCATGTACTTCCGGCCTTACTTCTTGCATCCACCCTCAGGTGTTAAAGAACGACACCTTATGTGTCCTAGTCACCCTCTTTCCACAAGTATATTACCAGCCTGCATCTTCGTTCTTTGAGATCCAGCCTGAACAAAAACACTCTCGAGGCAAGCGAGACTTGAGAGTGTCAGCGGCCCTCCCAACCCTTATAGTTGGAACAGGAATAGAGGCTGGGGTTGGAACGGGCACAGCTGCTCTAATACGAGGCAACCAGCAGTTTGACGCTTTAGCCCAAGCCATTGACTTTGATTTAGTCCAACTAGAAAATTCTACTCGCCACATACGAGGTTCCTTAGATTCTTTGGCTGAAATGGCGCTACAGAACAGGCGGAGACTAGACCTAATATTATTACACCAAGGAGGATTATGCCAGGCTTTGGGAGAACAATGTTGTTTCTATGCCAGTAACTCGGGAATTGTACAAGACAGCCTAGCTGTTGTACGCCAACATCTACAGGAAAGAGCAAAAATAAGAGAACAGAATAAAAATTGGTATGAAAACATCTTTAACTGGTCCCCCTGGCTCACCGCTCTCATTACAGCCCTGGCAGGCCCCCTAGCGCTTCTGCTGCTGCTCCTGACTTTAGGAGCCTACACTTTAAATAGATTACTTGCCTTCATGCGAGAACGTCTGAGTGCCATACGACTGATGGTTCTGAGGTCTCAATATGCCCAGCCCCCAGCCGACCAGAGCGAGGACCAGTACGTACAACTAGGTCCCTTAAAATTTCAAGAAGACCCATGA"
# Convert DNA sequence to DNAString object
dna_string <- DNAString(dna_sequence)
# Translate DNA sequence to amino acids
protein_sequence <- translate(dna_string)
Alignment_phyDat <- msaConvert(mycombinedSeq, type="phangorn::phyDat")
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
install.packages("phangorn")
library(phangorn)
Alignment_phyDat <- msaConvert(mycombinedSeq, type="phangorn::phyDat")
Alignment_phyDat <- msaConvert(mySequenceFile, type="phangorn::phyDat")
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
class(mycombinedSeq)
# Read the alignment file
alignment <- readDNAMultipleAlignment("mycombinedSeq.txt")
# Read the DNA FASTA file
dna_seq <- readDNAStringSet("Data/Homework05/mycombinedSeq.txt")
# Translate DNA sequences into amino acid sequences
protein_seq <- translate(dna_seq, genetic_code = "Standard")
# Read the DNA FASTA file
dna_seq <- readDNAStringSet("Data/Homework05/sequence01.fasta")
# Translate DNA sequences into amino acid sequences
protein_seq <- translate(dna_seq, genetic_code = "Standard")
# Translate DNA sequences into amino acid sequences
protein_seq <- translate(sequence01.fasta, genetic_code = "Standard")
library(Biostrings)
dna_sequences <- readDNAStringSet("sequence01.fasta")
dna_sequences <- readDNAStringSet("Data/Homework05/sequence01.fasta")
amino_acid_sequences <- translate(dna_sequences)
amino_acid_sequences
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(mySequences01, type="phangorn::phyDat")
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(mycombinedSeq, type="phangorn::phyDat")
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(mySequenceFile, type="phangorn::phyDat")
mySequences01 <- readDNAStringSet("sequence01.fasta")
mySequences02 <- readDNAStringSet("sequence02.fasta")
mySequences03 <- readDNAStringSet("sequence03.fasta")
mySequences04 <- readDNAStringSet("sequence04.fasta")
mySequences05 <- readDNAStringSet("sequence05.fasta")
mycombinedSeq <- readDNAStringSet("mycombinedSeq.txt")
mySequenceFile <- c(mySequences01, mySequences02, mySequences03, mySequences04, mySequences05)
mySequenceFile
myFirstAlignment <- msa(mySequenceFile)
myFirstAlignment
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(myFirstAlignment, type="phangorn::phyDat")
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
library(ape)
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(myFirstAlignment, type="phangorn::phyDat")
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
install.packages(ape)
library(ape)
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(myFirstAlignment, type="phangorn::phyDat")
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
Alignment_phyDat
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
install.packages("phangorn")
install.packages("phangorn")
library(phangorn)
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(myFirstAlignment, type="phangorn::phyDat")
Alignment_phyDat
write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
alignment_length <- width(myFirstAlignment)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(myFirstAlignment, count_gaps)
print(myFirstAlignment, show="complete")
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mySequenceFile, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mycombinedSeq, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
####Function to count gaps in a sequence ####
count_gaps <- function(sequence) {
#Search for the presence of "-" in the sequence
gap_positions <- grepl("-", sequence)
#Count the number of TRUE values (i.e., gaps)
num_gaps <- sum(gap_positions)
return(num_gaps)
}
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mycombinedSeq, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mySequenceFile, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(alignment, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#####Calculate the width of the alignments ####
alignment_length <- width(myFirstAlignment)
#Search for the presence of "-" in the sequence
gap_positions <- grepl(".", sequence)
####Function to count gaps in a sequence ####
count_gaps <- function(sequence) {
#Search for the presence of "-" in the sequence
gap_positions <- grepl(".", sequence)
#Count the number of TRUE values (i.e., gaps)
num_gaps <- sum(gap_positions)
return(num_gaps)
}
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(mycombinedSeq, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
alignment_set <- DNAStringSet(mySequenceFile)
consensus <- consensusString(alignment_set)
print(consensus)
#Count gaps in each sequence of the alignment
num_gaps_in_sequences <- sapply(consensus, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#####Calculate the width of the alignments ####
alignment_length <- width(consensus)
#Print the length of the alignments
print(alignment_length)
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
gc_content <- vcountPattern("GC", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(consensus)
HyenaEnv2Com
HyenaEnv2Com <- msaConvert(HyenaEnv2, type="seqinr::alignment")
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(consensus, type="phangorn::phyDat")
Alignment_phyDat
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
gc_content <- vcountPattern("GC", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
gc_content <- vcountPattern("C", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
# Calculate the GC content for each position in the alignment
c_content <- vcountPattern("G, C", alignment) / width(alignment)
# Calculate the GC content for each position in the alignment
c_content <- vcountPattern("G", "C", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
# Assuming genome_sequence is a DNAStringSet
genome_sequence <- readDNAStringSet("sequence.fasta")
G_content <- vcountPattern("G", alignment) / width(alignment)
# Print the GC content for each position
print(gc_content)
# Print the GC content for each position
print(c_content)
####Calculate GC content ####
# Convert the alignment to a DNAStringSet object
alignment <- DNAStringSet(consensus)
# Calculate the GC content for each position in the alignment
c_content <- vcountPattern("C", alignment) / width(alignment)
G_content <- vcountPattern("G", alignment) / width(alignment)
# Print the GC content for each position
print(c_content)
print(g_content)
print(G_content)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
# Print the GC content for each position
print(c_content)
print(G_content)
gc_count <- sum(str_count(consensus, "G") + str_count(consensus, "C"))
# Calculate the GC content
gc_content <- gc_count / nchar(consensus) * 100
# Print the GC content
print(gc_content)
mySequenceFile
#### Creating an msa alignment ####
myFirstAlignment <- msa(mySequenceFile)
myFirstAlignment
library(dplyr)
library(tidyverse)
library(genepop)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
HyenaEnv2Com
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
####Creat Phylogenetic Tree ####
Env2Tree <- nj(d)
plot(Env2Tree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
#### Translate DNA sequence into AA sequence ####
dna_sequences <- readDNAStringSet("Data/Homework05/sequence01.fasta")
amino_acid_sequences <- translate(dna_sequences)
amino_acid_sequences
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
install.packages("seqinr")
library(seqinr)
library(ape)
install.packages("phangorn")
library(phangorn)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
HyenaEnv2Com
HyenaEnv2Com <- msaConvert(HyenaEnv2, type="seqinr::alignment")
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
####Creat Phylogenetic Tree ####
Env2Tree <- nj(d)
plot(Env2Tree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
mySequenceFile
#### Creating a consensus ####
alignment_set <- DNAStringSet(mySequenceFile)
consensus <- consensusString(alignment_set)
print(consensus)
#### Creating an msa alignment ####
myFirstAlignment <- msa(mySequenceFile)
myFirstAlignment
print(myFirstAlignment, show="complete")
####Function to count gaps in a consensus ####
count_gaps <- function(sequence) {
#Search for the presence of "-" in the sequence
gap_positions <- grepl("-", sequence)
#Count the number of TRUE values (i.e., gaps)
num_gaps <- sum(gap_positions)
return(num_gaps)
}
#Count gaps in each sequence of the consensus
num_gaps_in_sequences <- sapply(consensus, count_gaps)
#Total gaps in the alignment
total_gaps <- sum(num_gaps_in_sequences)
#Print the total number of gaps
print(total_gaps)
#####Calculate the width of the alignments ####
alignment_length <- width(consensus)
#Print the length of the alignments
print(alignment_length)
####Convert alignment to SeqinR format ####
HyenaEnv2 <- msa(mycombinedSeq)
HyenaEnv2Com
HyenaEnv2Com <- msaConvert(HyenaEnv2, type="seqinr::alignment")
# Compute distance matrix using SeqinR functions
# Assuming you want to compute identity distance
d <- dist.alignment(HyenaEnv2Com)
# View the distance matrix
print(d)
####Creat Phylogenetic Tree ####
Env2Tree <- nj(d)
plot(Env2Tree, main="Phylogenetic Tree of HyenaEnv2 Gene Sequences")
#### Translate DNA sequence into AA sequence ####
dna_sequences <- readDNAStringSet("Data/Homework05/sequence01.fasta")
amino_acid_sequences <- translate(dna_sequences)
amino_acid_sequences
####Convert alignment to phangorn ####
Alignment_phyDat <- msaConvert(myFirstAlignment, type="phangorn::phyDat")
print(result)
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
library(UniprotR)
library(protti)
library(r3dmol)
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#Checked that directory was in place ####
getwd()
setwd("Data/")
setwd("Homework06/")
#Checked that directory was in place ####
getwd()
mySequences01 <- readDNAStringSet("sequence01.fasta")
mySequences01
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
?PlotGoInfo()
# Connect to UniProt database
up <- UniProt.ws(accession_numbers)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
#This is where the problem is ####
?GetProteinGOInfo
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
AccessionNumbersGO <- GetProteinGOInfo(idmapping_2024_02_12)
PlotGoInfo(idmapping_2024_02_12)
PlotGoInfo(idmapping_2024_02_12.fasta)
#Checked that directory was in place ####
getwd()
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
# Sample list of accession numbers
accession_numbers <- c("A0A6G1AHE8", "A0A7J7SV63", "P21445", "Q2F7I8", "A0A7J7U5J2")
# Convert the list to a character string
accession_string <- paste(accession_numbers, collapse = ",")
# Print the formatted string
print(accession_string)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_string)
PlotGoInfo(AccessionNumbersGO)
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#### Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
# Sample list of accession numbers
accession_numbers <- c("A0A6G1AHE8", "A0A7J7SV63", "P21445", "Q2F7I8", "A0A7J7U5J2")
# Convert the list to a character string
accession_string <- paste(accession_numbers, collapse = ",")
# Print the formatted string
print(accession_string)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
PlotGoInfo(AccessionNumbersGO)
str(AccessionNumbersGO)
summary(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
?PlotGoInfo()
library(UniprotR)
PlotGoInfo(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO, directorypath = NULL)
PlotGoInfo(AccessionNumbersGO)
str(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
write.csv(AccessionNumbersGO, "AccessionNumbersGO.csv", row.names = FALSE)
PlotGoInfo("AccessionNumbersGO.csv")
PlotGoInfo(AccessionNumbersGO)
PlotGoInfo("AccessionNumbersGO.csv")
# Read the CSV file into a data frame
AccessionNumbersGO <- read.csv("AccessionNumbersGO.csv")
# Plot GO information
PlotGoInfo(AccessionNumbersGO)
# Read the CSV file into a data frame
AccessionNumbersGO <- read.csv("AccessionNumbersGO.csv")
# Plot GO information
PlotGoInfo(AccessionNumbersGO)
PlotGoInfo("AccessionNumbersGO.csv")
?PlotGoInfo()
PlotGoInfo("AccessionNumbersGO.csv")
PlotGoInfo(AccessionNumbersGO)
#This is where the problem is ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
str(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
?PlotGoInfo()
PlotGoInfo(AccessionNumbersGO)
# Read the CSV file into a data frame
AccessionNumbersGO <- read.csv("AccessionNumbersGO.csv")
# Plot GO information
PlotGoInfo(AccessionNumbersGO)
# Assuming AccessionNumbersGO is a data frame returned by GetProteinGOInfo
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
# Assuming AccessionNumbersGO is a data frame with 'GOterm' and 'Count' columns
# Create a bar plot
barplot(AccessionNumbersGO$Count, names.arg = AccessionNumbersGO$GOterm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
class(AccessionNumbersGO$Count)
AccessionNumbersGO$Count <- as.numeric(AccessionNumbersGO$Count)
PlotGoInfo(AccessionNumbersGO)
str(AccessionNumbersGO)
PlotGoInfo(AccessionNumbersGO)
# Assuming AccessionNumbersGO is your original data frame
# Extract GO terms and their counts from AccessionNumbersGO
go_terms <- unlist(strsplit(AccessionNumbersGO$Gene.Ontology..GO., ";"))
go_terms <- gsub("\\[.*?\\]", "", go_terms)  # Remove GO IDs from GO terms
# Create a data frame with GO terms and their counts
go_counts <- data.frame(GoTerm = go_terms, Count = rep(1, length(go_terms)))
# Summarize the counts for each GO term
go_counts <- aggregate(Count ~ GoTerm, go_counts, sum)
# Plot the GO information
barplot(go_counts$Count, names.arg = go_counts$GoTerm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
